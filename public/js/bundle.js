"use strict";angular.module("sampleApp",["ui.router","ui.bootstrap","appRoutes","dndLists","AppCtrl","MainCtrl","TravelerCtrl","SearchTravelerCtrl","FormGenCtrl.js","TravelerService","FormService","DocNumService"]),angular.module("appRoutes",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,r){t.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"views/home.html",controller:"MainController"}).state("traveler",{url:"/traveler?_id&formId",views:{"":{templateUrl:"views/traveler.html",controller:"TravelerController"},"formReview@traveler":{templateUrl:"views/formReview.html"}}}).state("searchTraveler",{url:"/searchTraveler",views:{"":{templateUrl:"views/searchTraveler.html",controller:"SearchTravelerController"},"formReview@searchTraveler":{templateUrl:"views/formReview.html"}}}).state("formGenerator",{url:"/formGenerator",views:{"":{templateUrl:"views/formGeneratorNav.html",controller:"FormGeneratorController"},"templateGenerator@formGenerator":{templateUrl:"views/templateGenerator.html",controller:"FormGeneratorController"},"templateCreator@formGenerator":{templateUrl:"views/templateCreator.html",controller:"FormGeneratorController"}}}),r.html5Mode(!0)}]),angular.module("AppCtrl",["ngAnimate"]).controller("AppController",["$scope",function(e){e.isCollapsed=!0}]);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};angular.module("FormGenCtrl.js",["ui.bootstrap.tabs"]).controller("FormGeneratorController",["$scope","Form",function(e,t){e.submit=function(r){r&&""!==r||(r=prompt("password")),"123"===r?t.create(e.template).success(function(t){alert("add"),e.create=t,delete e.template}):alert("go home son")},e.save=function(){var r=prompt("password");"123"===r?e.create._id?t.save(e.create).success(function(e){alert("save")}):(e.template=e.create,e.submit(r)):alert("go home")},e["delete"]=function(){var a=prompt("password");"QQmore"===a?confirm("delete template?")&&(e.create._id&&t["delete"](e.create._id).success(function(e){alert("removed")}),r()):alert("go home")},e.setSelectTab=function(t){e.selectTab=t},e.addItemRecord=function(){if(e.inputItemRecord&&""!==e.inputItemRecord){e.create.itemRecord||(e.create.itemRecord=[]);var t=e.create.itemRecord.length,r={id:t+1,Description:e.inputItemRecord};if("select"===e.inputItemRecordType){var a=e.selectOptions;a=a.split(",");for(var o=0;o<a.length;o++)a[o]=a[o].trim();a=Array.from(new Set(a)),r.select={name:""},r.select.options=a}e.create.itemRecord.push(r),e.inputItemRecord=""}},e.addStep=function(){e.create.steps||(e.create.steps=[]);var t=e.create.steps.length,r={step:t+1,type:e.inputStepType||"",Description:e.inputStepDes||""};e.create.steps.push(r),e.inputStepDes=""},e.addSubStep=function(){if(e.tempSub.inputSubStepDes&&""!==e.tempSub.inputSubStepDes){var t=e.tempSub.selectStepForSubStep;e.create.steps[t].list||(e.create.steps[t].list=[]);var r=e.create.steps[t].list.length,a={sub_step:r+1,Description:e.tempSub.inputSubStepDes};e.create.steps[t].list.push(a),e.tempSub.inputSubStepDes=""}},e.addSubOption=function(){for(var t=e.tempSubOption.selectSubForOption.split(",")[0],r=e.tempSubOption.selectSubForOption.split(",")[1],a=e.tempSubOption.subOptions.selectSubOption,o=e.tempSubOption.subOptions.option.input.split(","),n=0;n<o.length;n++)o[n]=o[n].trim();o=Array.from(new Set(o));var c={type:a,name:e.tempSubOption.subOptions.option.name,options:o};e.create.steps[t].list[r].options||(e.create.steps[t].list[r].options=[]),e.create.steps[t].list[r].options.push(c),e.tempSubOption.subOptions.option.name="",e.tempSubOption.subOptions.option.input=""},e.modifyID=function(e,t){for(var r=0;r<e.length;r++)"itemRecord"===t&&(e[r].id=r+1),"steps"===t&&(e[r].step=r+1),"sub_step"===t&&(e[r].sub_step=r+1)},e.editOption=function(e,t){if(console.log("undefined"==typeof t?"undefined":_typeof(t)),console.log(t),e){e.options=[],"string"==typeof t&&(t=t.split(","));for(var r=0;r<t.length;r++)e.options[r]=t[r].trim();e.options=Array.from(new Set(e.options))}},e.updateForm=function(){e.travelerData={},e.formId&&t.get(e.formId).success(function(t){e.create=t})};var r=function(){e.create={},e.create.isPublish=!1},a=function(){t.getFormList().success(function(t){e.formList=t})},o=function(){r(),a(),e.inputItemRecordType="text",e.jsonView=!1};o()}]),angular.module("MainCtrl",[]).controller("MainController",["$scope",function(e){e.tagline="to the moon and back!"}]),angular.module("SearchTravelerCtrl",["chart.js"]).controller("SearchTravelerController",["$scope","Traveler",function(e,t){e.search=function(){if(e.currentInput=e.searchInput,e.isSearch=!0,e.searchInput)if("sn"===e.searchOption){var r=e.searchInput.toString();t.searchLike(r).success(function(t){e.result=t,a()})}else t.normalSearch(e.searchOption,e.searchInput).success(function(t){e.result=t,a()})},e.editTraveler=function(e,t){window.open("traveler?_id="+e+"&formId="+t,"_blank")},e.removeTraveler=function(r,a){t.removeTraveler(r).success(function(t){e.result.splice(a,1)})},e.timeSpend=function(t){if(t.reviewAt){var a=Math.round((new Date(t.reviewAt)-new Date(t.createAt))/1e3);return e.totalTimeSpand+=a,r(a)}var o=Math.round((new Date-new Date(t.createAt))/1e3);return e.totalTimeSpand+=o,r(o)},e.totalTimeSpend=function(){return 5};var r=function(e){return Math.floor(e/60/60)+" Hours and "+Math.floor(e/60)%60+" min and "+e%60+" sec"},a=function(){e.stat={},e.pieLabels1=[],e.pieData1=[];for(var t=e.result,r=0;r<t.length;r++)t[r].status in e.stat?e.stat[t[r].status]+=1:(e.pieLabels1.push(t[r].status),e.stat[t[r].status]=1);e.stat.total=t.length;var a=0,o=0;e.stat.REJECT&&(a=e.stat.REJECT),e.stat.COMPLETED&&(o=e.stat.COMPLETED),e.stat.pecComplete=((o+a)/t.length*100).toFixed(2),e.stat.REJECT/t.length*100?e.stat.pecReject=(a/t.length*100).toFixed(2):e.stat.pecReject=0;for(var n=0;n<e.pieLabels1.length;n++)e.pieData1.push(e.stat[e.pieLabels1[n]]);e.pieLabels2=["Finish","Hold"],e.pieData2=[o+a,e.stat.total-(o+a)]},o=function(){e.isSearch=!1,e.searchOption="docNum",e.sortType="createAt",e.sortReverse=!1,e.travelerData={},e.totalTimeSpand=0},n=function(){o()};n()}]),angular.module("TravelerCtrl",[]).filter("unique",function(){return function(e,t){var r=[],a=[];return angular.forEach(e,function(e){var o=e[t];-1===a.indexOf(o)&&(a.push(o),r.push(e))}),r}}).controller("TravelerController",["$scope","Traveler","Form","DocNum","$stateParams",function(e,t,r,a,o){e.checkReadyReview=function(){e.travelerData.status&&"OPEN"!==e.travelerData.status?(e.travelerData.status="OPEN",e.travelerData.readyReview=!1):(e.travelerData.status="PANDING FOR REVIEW",e.travelerData.readyReview=!0)},e.updateForm=function(){e.travelerData={},e.formId&&r.get(e.formId).success(function(t){e.forms=t,e.lastStep=t.steps.length,e.travelerData.formId=t._id,e.travelerData.formRev=t.formRev,e.travelerData.formNo=t.formNo,e.travelerData.customer=t.customer,e.travelerData.status="OPEN",l(t._id,function(){})})},e.updateDocNum=function(){e.docNum.docNumData=e.docNum.docNumSelectList[e.docNum.docNumSelect],c()},e.nextStep=function(){var t=e.forms.steps[e.currentStep-1];t.list.length>=e.currentSubStep+1?e.currentSubStep+=1:(e.currentStep+=1,e.currentSubStep=1,e.currentStep>e.lastStep&&e.checkReadyReview())},e.statusPage=function(t){e.currentSubStep=1,e.currentStep=t},e.statusSubPage=function(t){e.currentSubStep=t},e.goBack=function(){e.currentStep=1,e.currentSubStep=1,e.checkReadyReview()},e.save=function(){e.travelerData.created?t.save(e.travelerData).success(function(e){alert("saved"),n()}):e.submit()},e.review=function(t){e.travelerData.reviewBy?("reject"===t?e.travelerData.status="REJECT":"complete"===t&&(e.travelerData.status="COMPLETED"),e.travelerData.reviewAt=new Date,e.save()):alert("enter reviewer name")},e.submit=function(){e.username&&e.travelerData.sn?(e.travelerData.created=!0,e.travelerData.createdBy=e.username,e.travelerData.createAt=new Date,t.create(e.travelerData).success(function(t){e.travelerData=t,alert("submit complete"),n()})):alert("enter your name or serial number plz ")},e["new"]=function(){s()},e["delete"]=function(){alert("delete click"),e.travelerData._id&&t.removeTraveler(e.travelerData._id).success(function(e){s()})},e.appendSubStepEditInfo=function(){var t=e.username;if(""!==t){var r=e.currentStep,a=e.currentSubStep;return e.travelerData.step[r][a].editBy=t,e.travelerData.step[r][a].editTime=new Date,!0}return alert("enter your name"),!1},e.printTraveler=function(){window.print()},e.saveDocNum=function(){e.docNum.docNumData.formId=e.travelerData.formId,e.docNum.docNumData.formRev=e.travelerData.formRev,e.docNum.docNumData.formNo=e.travelerData.formNo,u("create"),delete e.docNum.docNumData._id,a.create(e.docNum.docNumData).success(function(t){l(e.travelerData.formId,function(r){for(var a=0;a<r.length;a++)r[a]._id===t._id&&(e.docNum.docNumData=t,e.docNum.docNumSelect=a.toString())})})},e.editDocNum=function(){a.editDocNumData(e.docNum.docNumData).success(function(t){l(e.travelerData.formId,function(){})})},e.checkForSN=function(){e.travelerData._id||t.normalSearch("sn",e.travelerData.sn).success(function(t){t.length>0?(e.isSNExist=!0,e.searchSN=t):e.isSNExist=!1})},e.setTravelerData=function(){e.travelerData=e.searchSN[e.selectSN],m()};var n=function(){e.travelerData.sn&&e.travelerData.itemRecord.docNum&&(e.topCollapse=!0)},c=function(){e.travelerData.itemRecord={docNumId:e.docNum.docNumData._id,docNum:e.docNum.docNumData.docNum}},u=function(t){var r=1;if("create"===t)for(var a=0;a<e.docNum.docNumSelectList.length;a++)e.docNum.docNumSelectList[a].docNum===e.docNum.docNumData.docNum&&(r+=1);e.docNum.docNumData.label=r},i=function(){r.getFormList().success(function(t){e.formList=t})},s=function(){e.travelerData={},e.currentStep=1,e.currentSubStep=1,e.travelerData.readyReview=!1,e.formId="",e.isNew=!0},l=function(t,r){a.getDocNumList(t).success(function(t){e.docNum.docNumSelectList=t,r(t)})},m=function(){a.getDocNumList(e.travelerData.formId).success(function(t){for(var r=0;r<t.length;r++)if(t[r]._id===e.travelerData.itemRecord.docNumId){e.docNum.docNumData=t[r],e.docNum.docNumSelect=r.toString();break}})},p=function(){e.topCollapse=!1,e.username="John Snow",e.docNum={},e.isSNExist=!1,e.searchSN={},e.selectSN="0"},d=function(){p(),s(),i(),o.formId&&(e.formId=o.formId,e.updateForm(),e.isNew=!1),o._id&&(e.isNew=!1,t.get("_id",o._id).success(function(t){e.travelerData=t,m(),n()}))};d()}]),angular.module("DocNumService",[]).factory("DocNum",["$http",function(e){return{getDocNumList:function(t){return e.get("/api/docNums/"+t)},create:function(t){return e.post("/api/docNums/",t)},editDocNumData:function(t){return e.put("/api/docNums/",t)},getDocNum:function(t,r){return console.log("d service"),e.get("/api/docNums/searchSingle?type="+t+"&data="+r)}}}]),angular.module("FormService",[]).factory("Form",["$http",function(e){return{create:function(t){return e.post("/api/forms",t)},getAll:function(){return e.get("/api/forms/")},getFormList:function(){return e.get("/api/forms/formList")},get:function(t){return e.get("/api/forms/search/"+t)},save:function(t){return e.put("/api/forms",t)},"delete":function(t){return e["delete"]("/api/forms/"+t)}}}]),angular.module("TravelerService",[]).factory("Traveler",["$http",function(e){var t={};return{create:function(t){return e.post("/api/traveler",t)},getReviewData:function(){return t},get:function(t,r){return e.get("/api/traveler?type="+t+"&data="+r)},save:function(t){return e.put("/api/traveler",t)},setReviewData:function(e){t=e},searchLike:function(t){return e.get("/api/traveler/searchLike/"+t)},removeTraveler:function(t,r){return e["delete"]("/api/traveler/"+t)},normalSearch:function(t,r){return e.get("/api/traveler/normalSearch?type="+t+"&data="+r)}}}]);
//# sourceMappingURL=data:application/json;base64,
